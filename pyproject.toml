[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "strato-peft"
version = "0.1.0"
authors = [
    {name = "STRATO-PEFT Team", email = "strato-peft@example.com"},
]
description = "Strategic Parameter-Efficient Fine-Tuning Experimental Framework"
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = [
    "machine learning",
    "deep learning",
    "parameter efficient fine-tuning",
    "PEFT",
    "LoRA",
    "transformers",
    "large language models",
    "reinforcement learning",
    "optimization",
]
dependencies = [
    # Core ML/DL libraries
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "torchaudio>=2.0.0",
    "transformers>=4.30.0",
    "datasets>=2.12.0",
    "tokenizers>=0.13.0",
    "accelerate>=0.20.0",
    "peft>=0.4.0",
    
    # Reinforcement Learning
    "gymnasium>=0.28.0",
    "stable-baselines3>=2.0.0",
    "sb3-contrib>=2.0.0",
    
    # Optimization & Training
    "optuna>=3.2.0",
    "ray[tune]>=2.5.0",
    "hyperopt>=0.2.7",
    "scikit-optimize>=0.9.0",
    
    # Data Processing
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scipy>=1.10.0",
    "scikit-learn>=1.3.0",
    
    # Visualization
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.14.0",
    "wandb>=0.15.0",
    "tensorboard>=2.13.0",
    
    # Configuration & Tools
    "omegaconf>=2.3.0",
    "hydra-core>=1.3.0",
    "rich>=13.4.0",
    "click>=8.1.0",
    "tqdm>=4.65.0",
    "pyyaml>=6.0",
    
    # Evaluation Metrics
    "evaluate>=0.4.0",
    "rouge-score>=0.1.2",
    "bleu>=0.2.0",
    "sacrebleu>=2.3.0",
    "bert-score>=0.3.13",
    
    # Memory & Performance
    "psutil>=5.9.0",
    "gpustat>=1.1.0",
    "nvidia-ml-py>=12.535.0",
    "memory-profiler>=0.61.0",
    
    # File I/O & Serialization
    "h5py>=3.9.0",
    "zarr>=2.15.0",
    "joblib>=1.3.0",
    "dill>=0.3.7",
]

[project.optional-dependencies]
dev = [
    # Code formatting and linting
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-mock>=3.11.0",
    
    # Documentation
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    
    # Jupyter
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.0",
    "ipywidgets>=8.0.0",
]
cuda = [
    "torch>=2.0.0+cu118",
    "torchvision>=0.15.0+cu118",
    "torchaudio>=2.0.0+cu118",
]
rocm = [
    "torch>=2.0.0+rocm5.4",
    "torchvision>=0.15.0+rocm5.4",
    "torchaudio>=2.0.0+rocm5.4",
]
mps = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "torchaudio>=2.0.0",
]

[project.urls]
"Homepage" = "https://github.com/your-org/strato-peft"
"Bug Reports" = "https://github.com/your-org/strato-peft/issues"
"Source" = "https://github.com/your-org/strato-peft"
"Documentation" = "https://strato-peft.readthedocs.io/"

[project.scripts]
strato-peft = "main:main"
strato-eval = "scripts.eval:main"
strato-compare = "scripts.compare:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.txt"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*",
    "datasets.*",
    "accelerate.*",
    "peft.*",
    "wandb.*",
    "optuna.*",
    "ray.*",
    "gymnasium.*",
    "stable_baselines3.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m "not slow"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
    "cuda: marks tests that require CUDA",
    "rocm: marks tests that require ROCm",
    "mps: marks tests that require Apple Silicon MPS",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

# Ruff linting (alternative to flake8)
[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
line-length = 88
target-version = "py38"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011", "B018"]

[tool.ruff.isort]
known-first-party = ["strato_peft"]

[tool.ruff.pyupgrade]
keep-runtime-typing = true