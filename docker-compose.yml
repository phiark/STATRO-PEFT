# STRATO-PEFT Docker Compose配置
# 支持多种部署模式和GPU平台，优化生产部署

version: '3.8'

# 共享配置模板
x-common-variables: &common-variables
  STRATO_PEFT_HOME: /app
  PYTHONPATH: /app/src
  OMP_NUM_THREADS: 1
  TOKENIZERS_PARALLELISM: false
  TRANSFORMERS_CACHE: /app/cache/huggingface
  HF_HOME: /app/cache/huggingface

x-common-volumes: &common-volumes
  - ./results:/app/results:rw              # 训练结果输出
  - ./logs:/app/logs:rw                    # 日志文件
  - ./cache:/app/cache:rw                  # 缓存文件 
  - ./data:/app/data:rw                    # 数据集存储
  - ./models:/app/models:rw                # 保存的模型
  - ./experiments:/app/experiments:rw      # 实验记录
  - ./notebooks:/app/notebooks:rw          # Jupyter笔记本
  - ./configs:/app/configs:ro              # 配置文件（只读）
  - ./cache/huggingface:/app/cache/huggingface:rw  # HuggingFace缓存

x-health-check: &health-check
  test: ["CMD", "python", "/app/docker/healthcheck.py"]
  interval: 30s
  timeout: 15s
  retries: 3
  start_period: 60s

services:
  # ================================
  # 生产环境 - CUDA GPU
  # ================================
  strato-peft-cuda:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        PLATFORM: cuda
        PYTHON_VERSION: 3.9
        PYTORCH_VERSION: 2.1.0
        BUILD_ENV: production
    image: strato-peft:cuda-latest
    container_name: strato-peft-cuda
    environment:
      <<: *common-variables
      STRATO_PLATFORM: cuda
      CUDA_VISIBLE_DEVICES: "0"
      NVIDIA_VISIBLE_DEVICES: all
    volumes: *common-volumes
    working_dir: /app
    command: ["python", "main.py", "--help"]
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    restart: unless-stopped
    healthcheck: *health-check
    networks:
      - strato-network
    profiles:
      - cuda
      - gpu
      - production

  # ================================
  # 生产环境 - ROCm GPU
  # ================================
  strato-peft-rocm:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        PLATFORM: rocm
        PYTHON_VERSION: 3.9
        PYTORCH_VERSION: 2.1.0
        BUILD_ENV: production
    image: strato-peft:rocm-latest
    container_name: strato-peft-rocm
    environment:
      <<: *common-variables
      STRATO_PLATFORM: rocm
      HIP_VISIBLE_DEVICES: "0"
    volumes:
      - *common-volumes
      - /dev/kfd:/dev/kfd
      - /dev/dri:/dev/dri
    working_dir: /app
    command: ["python", "main.py", "--help"]
    devices:
      - /dev/kfd
      - /dev/dri
    group_add:
      - video
      - render
    restart: unless-stopped
    healthcheck: *health-check
    networks:
      - strato-network
    profiles:
      - rocm
      - amd

  # ================================
  # 生产环境 - CPU Only
  # ================================
  strato-peft-cpu:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        PLATFORM: cpu
        PYTHON_VERSION: 3.9
        PYTORCH_VERSION: 2.1.0
        BUILD_ENV: production
    image: strato-peft:cpu-latest
    container_name: strato-peft-cpu
    environment:
      <<: *common-variables
      STRATO_PLATFORM: cpu
      OMP_NUM_THREADS: 4
      MKL_NUM_THREADS: 4
    volumes: *common-volumes
    working_dir: /app
    command: ["python", "main.py", "--help"]
    deploy:
      resources:
        limits:
          cpus: '8.0'
          memory: 16G
    restart: unless-stopped
    healthcheck: *health-check
    networks:
      - strato-network
    profiles:
      - cpu
      - default

  # ================================
  # 开发环境 - 带Jupyter
  # ================================
  strato-peft-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        PLATFORM: cuda
        PYTHON_VERSION: 3.9
        BUILD_ENV: development
    image: strato-peft:dev-latest
    container_name: strato-peft-dev
    environment:
      <<: *common-variables
      STRATO_PLATFORM: cuda
      CUDA_VISIBLE_DEVICES: "0"
      NVIDIA_VISIBLE_DEVICES: all
      JUPYTER_ENABLE_LAB: "yes"
    volumes:
      - *common-volumes
      - .:/app  # 开发时挂载整个项目
      - jupyter-data:/home/strato/.jupyter
    working_dir: /app
    ports:
      - "8888:8888"  # Jupyter Lab
      - "6006:6006"  # TensorBoard
      - "8080:8080"  # Web UI
    command: ["jupyter", "lab", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root"]
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    restart: unless-stopped
    stdin_open: true
    tty: true
    networks:
      - strato-network
    profiles:
      - dev
      - jupyter

  # ================================
  # 训练任务运行器
  # ================================
  strato-peft-trainer:
    extends: strato-peft-cuda
    container_name: strato-peft-trainer
    command: ["python", "main.py", "--config", "configs/gpt2_smoke_test.yaml"]
    profiles:
      - training

  # ================================
  # 评估服务
  # ================================
  strato-peft-evaluator:
    extends: strato-peft-cuda
    container_name: strato-peft-evaluator
    command: ["python", "-m", "src.evaluation.evaluate", "--config", "configs/evaluation.yaml"]
    profiles:
      - evaluation

  # ================================
  # 监控和可视化服务
  # ================================
  tensorboard:
    image: tensorflow/tensorflow:latest
    container_name: strato-tensorboard
    command: ["tensorboard", "--logdir=/logs", "--host=0.0.0.0", "--port=6006"]
    volumes:
      - ./logs:/logs:ro
      - ./results:/results:ro
    ports:
      - "6007:6006"
    restart: unless-stopped
    networks:
      - strato-network
    profiles:
      - monitoring

  # WandB本地服务器（可选）
  wandb-local:
    image: wandb/local:latest
    container_name: strato-wandb
    environment:
      - MYSQL_DATABASE=wandb_local
      - MYSQL_USER=wandb
      - MYSQL_PASSWORD=wandb
    volumes:
      - wandb-data:/vol
    ports:
      - "8081:8080"
    restart: unless-stopped
    networks:
      - strato-network
    profiles:
      - monitoring
      - wandb

  # ================================
  # 数据管理服务
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: strato-postgres
    environment:
      POSTGRES_DB: strato_peft
      POSTGRES_USER: strato_user
      POSTGRES_PASSWORD: strato_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - strato-network
    profiles:
      - dev
      - database

  redis:
    image: redis:7-alpine
    container_name: strato-redis
    command: redis-server --appendonly yes --requirepass strato_redis_pass
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - strato-network
    profiles:
      - dev
      - cache

  # MLflow跟踪服务器
  mlflow:
    image: python:3.9-slim
    container_name: strato-mlflow
    depends_on:
      - postgres
    environment:
      MLFLOW_BACKEND_STORE_URI: postgresql://strato_user:strato_pass@postgres:5432/strato_peft
      MLFLOW_DEFAULT_ARTIFACT_ROOT: /mlflow/artifacts
    volumes:
      - mlflow-artifacts:/mlflow/artifacts
    ports:
      - "5000:5000"
    command: >
      bash -c "
        pip install --no-cache-dir mlflow psycopg2-binary &&
        mlflow server \
          --backend-store-uri postgresql://strato_user:strato_pass@postgres:5432/strato_peft \
          --default-artifact-root /mlflow/artifacts \
          --host 0.0.0.0 \
          --port 5000
      "
    restart: unless-stopped
    networks:
      - strato-network
    profiles:
      - dev
      - mlflow

# ================================
# 网络配置
# ================================
networks:
  strato-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================
# 持久化数据卷
# ================================
volumes:
  jupyter-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  mlflow-artifacts:
    driver: local
  wandb-data:
    driver: local